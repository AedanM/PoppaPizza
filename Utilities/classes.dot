digraph "classes" {
rankdir=BT
charset="utf-8"
"Classes.Sprite.BackgroundElementSprite" [color="black", fontcolor="black", label=<{BackgroundElementSprite|Collision : bool<br ALIGN="LEFT"/>ImageType<br ALIGN="LEFT"/>image<br ALIGN="LEFT"/>rect<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"Classes.Sprite.CharImageSprite" [color="black", fontcolor="black", label=<{CharImageSprite|CorrespondingID : int<br ALIGN="LEFT"/>DataObject<br ALIGN="LEFT"/>ImageType<br ALIGN="LEFT"/>MvmHandler<br ALIGN="LEFT"/>PersonalTimer<br ALIGN="LEFT"/>image<br ALIGN="LEFT"/>rect<br ALIGN="LEFT"/>|ChangeOutfit(newOutfitPath): None<br ALIGN="LEFT"/>CheckSpawnCollision(activeGame): None<br ALIGN="LEFT"/>CreatePersonTimerBar(completeTask, assocId, length, startingState, offset): None<br ALIGN="LEFT"/>UpdateSprite(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Handlers.MovementHandler.CharacterMovementHandler" [color="black", fontcolor="black", label=<{CharacterMovementHandler|CurrentPointIdx : int<br ALIGN="LEFT"/>Dest : tuple<br ALIGN="LEFT"/>DestX<br ALIGN="LEFT"/>DestY<br ALIGN="LEFT"/>DstSet : bool<br ALIGN="LEFT"/>InMotion : bool<br ALIGN="LEFT"/>MaxMovementSpeed<br ALIGN="LEFT"/>MovementTolerance : float<br ALIGN="LEFT"/>OnComplete : NoneType<br ALIGN="LEFT"/>PointsList : list<br ALIGN="LEFT"/>StartTime<br ALIGN="LEFT"/>|CalcNewPosition(obj): None<br ALIGN="LEFT"/>FinishMovement(): None<br ALIGN="LEFT"/>IsFinished(obj): bool<br ALIGN="LEFT"/>MoveChar(obj): None<br ALIGN="LEFT"/>NeedsToQueue(movingSprite): bool<br ALIGN="LEFT"/>StartNewListedMotion(pointList, speed): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Handlers.ClickHandler.ClickState" [color="black", fontcolor="black", label=<{ClickState|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"Definitions.ColorTools.Color" [color="black", fontcolor="black", label=<{Color|BGR<br ALIGN="LEFT"/>H : int<br ALIGN="LEFT"/>HSV<br ALIGN="LEFT"/>RGB<br ALIGN="LEFT"/>S : int<br ALIGN="LEFT"/>V : int<br ALIGN="LEFT"/>|GetNumPy(): 'np.NDArray[np.uint8]'<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Classes.People.Customer" [color="black", fontcolor="black", label=<{Customer|CurrentState<br ALIGN="LEFT"/>DesiredJob<br ALIGN="LEFT"/>WorkerAssigned : bool<br ALIGN="LEFT"/>|CreateCustomer(startLocation, activeGame): 'Customer'<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Definitions.CustomerDefs.CustomerStates" [color="black", fontcolor="black", label=<{CustomerStates|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"Definitions.Prices.DefaultPrices" [color="black", fontcolor="black", label=<{DefaultPrices|NewWorker : float<br ALIGN="LEFT"/>Rent : int<br ALIGN="LEFT"/>Salary : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"Definitions.DefinedLocations.DefinedLocations" [color="black", fontcolor="black", label=<{DefinedLocations|BlueLockerRoom<br ALIGN="LEFT"/>CustomerEntrance<br ALIGN="LEFT"/>CustomerExit<br ALIGN="LEFT"/>CustomerSpawn<br ALIGN="LEFT"/>GreenLockerRoom<br ALIGN="LEFT"/>GreyLockerRoom<br ALIGN="LEFT"/>KitchenLocation<br ALIGN="LEFT"/>PinkLockerRoom<br ALIGN="LEFT"/>YellowLockerRoom<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"Definitions.DefinedPaths.DefinedPaths" [color="black", fontcolor="black", label=<{DefinedPaths|<br ALIGN="LEFT"/>|BackToKitchen(sprite, activeGame): list<br ALIGN="LEFT"/>CustomerToEntrance(sprite): list<br ALIGN="LEFT"/>CustomerToExit(sprite): list<br ALIGN="LEFT"/>CustomerToRandomSeat(sprite): list<br ALIGN="LEFT"/>KitchenToCustomer(sprite, dest): list<br ALIGN="LEFT"/>KitchenToLockerRoom(sprite, dest): list<br ALIGN="LEFT"/>TableToExit(sprite): list<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Classes.Game.Game" [color="black", fontcolor="black", label=<{Game|BackgroundSpriteGroup<br ALIGN="LEFT"/>Chances<br ALIGN="LEFT"/>CharSpriteGroup<br ALIGN="LEFT"/>CustomerList : list<br ALIGN="LEFT"/>Font : Font<br ALIGN="LEFT"/>ForegroundSpriteGroup<br ALIGN="LEFT"/>GameClock<br ALIGN="LEFT"/>JobList : list<br ALIGN="LEFT"/>Screen<br ALIGN="LEFT"/>ScreenSize<br ALIGN="LEFT"/>Settings<br ALIGN="LEFT"/>ShowScreen : bool<br ALIGN="LEFT"/>SpriteGroups : list<br ALIGN="LEFT"/>StartTime<br ALIGN="LEFT"/>UserInventory<br ALIGN="LEFT"/>WorkerList : list<br ALIGN="LEFT"/>|DrawBackground(): None<br ALIGN="LEFT"/>DrawScreenClock(locationTopLeft, foreColor, backColor, withMoney): None<br ALIGN="LEFT"/>MatchIdToPerson(inputId, targetOutput): dict<br ALIGN="LEFT"/>RemoveObjFromSprite(targetSprite): None<br ALIGN="LEFT"/>StartScreen(size): None<br ALIGN="LEFT"/>UpdateSprites(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Classes.GameClock.GameClock" [color="black", fontcolor="black", label=<{GameClock|ClockMul<br ALIGN="LEFT"/>CurrMonth<br ALIGN="LEFT"/>DateTime<br ALIGN="LEFT"/>Day : int<br ALIGN="LEFT"/>DayOfMonth<br ALIGN="LEFT"/>DisplayHour<br ALIGN="LEFT"/>Hour<br ALIGN="LEFT"/>LastTime<br ALIGN="LEFT"/>Minute<br ALIGN="LEFT"/>PygameClock<br ALIGN="LEFT"/>Running : bool<br ALIGN="LEFT"/>Second : int<br ALIGN="LEFT"/>UnixTime<br ALIGN="LEFT"/>WorkingDayEnd : int<br ALIGN="LEFT"/>WorkingDayStart : int<br ALIGN="LEFT"/>|CheckWorkingDay(): None<br ALIGN="LEFT"/>DayChange(): None<br ALIGN="LEFT"/>MonthChange(): None<br ALIGN="LEFT"/>NightCycle(): None<br ALIGN="LEFT"/>SetRunning(state)<br ALIGN="LEFT"/>UpdateClock(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Classes.GameObject.GameObject" [color="black", fontcolor="black", label=<{GameObject|Collision : bool<br ALIGN="LEFT"/>IsBackground : bool<br ALIGN="LEFT"/>IsRendered : bool<br ALIGN="LEFT"/>Moveable : bool<br ALIGN="LEFT"/>|Update(): None<br ALIGN="LEFT"/>UpdateSprite(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Utilities.MatchAndGroupImages.Image" [color="black", fontcolor="black", label=<{Image|cvObj<br ALIGN="LEFT"/>dstPath : str<br ALIGN="LEFT"/>fileName : str<br ALIGN="LEFT"/>filePath : str<br ALIGN="LEFT"/>hasChild : bool<br ALIGN="LEFT"/>hasParent : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"Assets.AssetLibrary.ImagePaths" [color="black", fontcolor="black", label=<{ImagePaths|AssetFolder : str<br ALIGN="LEFT"/>BackgroundPath : str<br ALIGN="LEFT"/>CoffeePath : str<br ALIGN="LEFT"/>CowboyPath : str<br ALIGN="LEFT"/>CustomerPath : str<br ALIGN="LEFT"/>LuauPath : str<br ALIGN="LEFT"/>SafariPath : str<br ALIGN="LEFT"/>SuitPath : str<br ALIGN="LEFT"/>TablePath : str<br ALIGN="LEFT"/>WorkerCoffeePath : str<br ALIGN="LEFT"/>WorkerCowboyPath : str<br ALIGN="LEFT"/>WorkerLuauPath : str<br ALIGN="LEFT"/>WorkerSafariPath : str<br ALIGN="LEFT"/>WorkerSuitPath : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"Assets.AssetLibrary.ImageTypes" [color="black", fontcolor="black", label=<{ImageTypes|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"Classes.Inventory.Inventory" [color="black", fontcolor="black", label=<{Inventory|Money : float<br ALIGN="LEFT"/>|GetPaid(amount): None<br ALIGN="LEFT"/>PayRent(amount): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Classes.Jobs.Job" [color="black", fontcolor="black", label=<{Job|AssignedWorker : int<br ALIGN="LEFT"/>JobCustomer : int<br ALIGN="LEFT"/>JobId : int<br ALIGN="LEFT"/>Length : int<br ALIGN="LEFT"/>Price : float<br ALIGN="LEFT"/>Type<br ALIGN="LEFT"/>Urgency<br ALIGN="LEFT"/>|Assign(target): None<br ALIGN="LEFT"/>GetAssignedFromID(jobList, targetID): tuple<br ALIGN="LEFT"/>SpawnJob(): 'Job'<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Classes.Jobs.JobTypes" [color="black", fontcolor="black", label=<{JobTypes|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"Definitions.Chances.LuckChances" [color="black", fontcolor="black", label=<{LuckChances|CustomerSpawn : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"Classes.GameClock.Month" [color="black", fontcolor="black", label=<{Month|Days : int<br ALIGN="LEFT"/>MonthOrder : int<br ALIGN="LEFT"/>Name : str<br ALIGN="LEFT"/>PreceedingDays : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"Definitions.CustomerDefs.MovementSpeeds" [color="black", fontcolor="black", label=<{MovementSpeeds|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"Classes.People.Person" [color="black", fontcolor="black", label=<{Person|Body : NoneType<br ALIGN="LEFT"/>FirstName : str<br ALIGN="LEFT"/>IdNum : int<br ALIGN="LEFT"/>IsAssigned : bool<br ALIGN="LEFT"/>LastName : str<br ALIGN="LEFT"/>|Create()<br ALIGN="LEFT"/>GenerateID(): int<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Classes.Sprite.RectangleObject" [color="black", fontcolor="black", label=<{RectangleObject|image : NoneType<br ALIGN="LEFT"/>rect<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"Definitions.DefinedLocations.SeatingPlan" [color="black", fontcolor="black", label=<{SeatingPlan|TableCols : list<br ALIGN="LEFT"/>TableRows : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"Classes.Settings.Settings" [color="black", fontcolor="black", label=<{Settings|Clock24 : bool<br ALIGN="LEFT"/>ClockDivisor<br ALIGN="LEFT"/>ClockPow : int<br ALIGN="LEFT"/>ClockPowRange : tuple<br ALIGN="LEFT"/>ClockSpeed<br ALIGN="LEFT"/>|AMPM(hour): str<br ALIGN="LEFT"/>ChangeClockMul(value): None<br ALIGN="LEFT"/>SetClockMul(value): None<br ALIGN="LEFT"/>ToggleClock24(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Classes.TimerBar.TimerBar" [color="black", fontcolor="black", label=<{TimerBar|AssocId : int<br ALIGN="LEFT"/>Color : tuple<br ALIGN="LEFT"/>Duration : float<br ALIGN="LEFT"/>Height : int<br ALIGN="LEFT"/>MaxWidth : int<br ALIGN="LEFT"/>OnComplete<br ALIGN="LEFT"/>Running : bool<br ALIGN="LEFT"/>StartTime : int<br ALIGN="LEFT"/>StartingState : int<br ALIGN="LEFT"/>TimerRect<br ALIGN="LEFT"/>Width : int<br ALIGN="LEFT"/>|AgeTimer(activeGame): None<br ALIGN="LEFT"/>StartTimer(activeGame): None<br ALIGN="LEFT"/>UpdateAndDraw(activeGame): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Classes.Jobs.UrgencyRatings" [color="black", fontcolor="black", label=<{UrgencyRatings|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"Classes.People.Worker" [color="black", fontcolor="black", label=<{Worker|BasePay : float<br ALIGN="LEFT"/>|CreateWorker(startLocation, activeGame): 'Worker'<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Classes.People.Customer" -> "Classes.People.Person" [arrowhead="empty", arrowtail="none"];
"Classes.People.Worker" -> "Classes.People.Person" [arrowhead="empty", arrowtail="none"];
"Classes.Sprite.BackgroundElementSprite" -> "Classes.GameObject.GameObject" [arrowhead="empty", arrowtail="none"];
"Classes.Sprite.CharImageSprite" -> "Classes.GameObject.GameObject" [arrowhead="empty", arrowtail="none"];
"Classes.Sprite.RectangleObject" -> "Classes.GameObject.GameObject" [arrowhead="empty", arrowtail="none"];
"Classes.GameClock.GameClock" -> "Classes.Game.Game" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="GameClock", style="solid"];
"Classes.Inventory.Inventory" -> "Classes.Game.Game" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="UserInventory", style="solid"];
"Classes.Jobs.Job" -> "Classes.People.Customer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="DesiredJob", style="solid"];
"Classes.Jobs.JobTypes" -> "Classes.Jobs.Job" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Type", style="solid"];
"Classes.Jobs.UrgencyRatings" -> "Classes.Jobs.Job" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Urgency", style="solid"];
"Classes.Settings.Settings" -> "Classes.Game.Game" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Settings", style="solid"];
"Classes.TimerBar.TimerBar" -> "Classes.Sprite.CharImageSprite" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="PersonalTimer", style="solid"];
"Definitions.Chances.LuckChances" -> "Classes.Game.Game" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Chances", style="solid"];
"Definitions.CustomerDefs.CustomerStates" -> "Classes.People.Customer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="CurrentState", style="solid"];
"Definitions.CustomerDefs.MovementSpeeds" -> "Handlers.MovementHandler.CharacterMovementHandler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="MaxMovementSpeed", style="solid"];
"Handlers.MovementHandler.CharacterMovementHandler" -> "Classes.Sprite.CharImageSprite" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="MvmHandler", style="solid"];
}
