digraph "classes" {
rankdir=BT
charset="utf-8"
"Classes.Sprite.BackgroundElementSprite" [color="black", fontcolor="black", label=<{BackgroundElementSprite|ImageType<br ALIGN="LEFT"/>image<br ALIGN="LEFT"/>rect<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"Classes.Sprite.CharImageSprite" [color="black", fontcolor="black", label=<{CharImageSprite|CorrespondingID : int<br ALIGN="LEFT"/>ImageType<br ALIGN="LEFT"/>MvmHandler : Optional[CharacterMovementHandler]<br ALIGN="LEFT"/>image<br ALIGN="LEFT"/>rect<br ALIGN="LEFT"/>|CheckSpawnCollision()<br ALIGN="LEFT"/><I>UpdateSprite</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Handlers.MovementHandler.CharacterMovementHandler" [color="black", fontcolor="black", label=<{CharacterMovementHandler|CurrentPointIdx : int<br ALIGN="LEFT"/>Dest : tuple<br ALIGN="LEFT"/>DestX<br ALIGN="LEFT"/>DestY<br ALIGN="LEFT"/>DstSet : bool<br ALIGN="LEFT"/>InMotion : bool<br ALIGN="LEFT"/>MaxMovementSpeed<br ALIGN="LEFT"/>MovementTolerance : float<br ALIGN="LEFT"/>OnComplete : NoneType<br ALIGN="LEFT"/>PointsList : list<br ALIGN="LEFT"/>|CalcNewPosition(obj)<br ALIGN="LEFT"/>FinishMovement()<br ALIGN="LEFT"/>IsFinished(obj): bool<br ALIGN="LEFT"/>StartNewListedMotion(pointList, speed)<br ALIGN="LEFT"/>StartNewMotion(start, dst, speed)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Handlers.ClickHandler.ClickState" [color="black", fontcolor="black", label=<{ClickState|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"Handlers.PathfindingHandler.Ctest" [color="black", fontcolor="black", label=<{Ctest|P1 : tuple<br ALIGN="LEFT"/>P2 : tuple<br ALIGN="LEFT"/>Result : list<br ALIGN="LEFT"/>Speed<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"Classes.People.Customer" [color="black", fontcolor="black", label=<{Customer|CurrentState<br ALIGN="LEFT"/>DesiredJob<br ALIGN="LEFT"/>WorkerAssigned : bool<br ALIGN="LEFT"/>|CreateCustomer()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Classes.People.CustomerStates" [color="black", fontcolor="black", label=<{CustomerStates|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"Classes.DefinedLocations.DefinedLocations" [color="black", fontcolor="black", label=<{DefinedLocations|CustomerEntrance<br ALIGN="LEFT"/>CustomerExit<br ALIGN="LEFT"/>KitchenDoorLocation<br ALIGN="LEFT"/>KitchenLocation<br ALIGN="LEFT"/>LockerRoomLocation<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"Classes.DefinedLocations.DefinedPaths" [color="black", fontcolor="black", label=<{DefinedPaths|<br ALIGN="LEFT"/>|BackToKitchen(sprite)<br ALIGN="LEFT"/>CustomerToExit(sprite)<br ALIGN="LEFT"/>KitchenToCustomer(sprite, dest)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Classes.Game.Game" [color="black", fontcolor="black", label=<{Game|ActiveTimerBars : list<br ALIGN="LEFT"/>BackgroundSpriteGroup<br ALIGN="LEFT"/>Chances<br ALIGN="LEFT"/>CharSpriteGroup<br ALIGN="LEFT"/>Clock<br ALIGN="LEFT"/>CustomerList : list<br ALIGN="LEFT"/>Font : Font<br ALIGN="LEFT"/>JobList : list<br ALIGN="LEFT"/>LineList : list<br ALIGN="LEFT"/>Money : int<br ALIGN="LEFT"/>Screen<br ALIGN="LEFT"/>ScreenSize<br ALIGN="LEFT"/>ShowScreen : bool<br ALIGN="LEFT"/>SpriteGroups : list<br ALIGN="LEFT"/>StartTime<br ALIGN="LEFT"/>TimerBars : list<br ALIGN="LEFT"/>WorkerList : list<br ALIGN="LEFT"/>|DrawScreenClock(locationTopLeft, foreColor, backColor)<br ALIGN="LEFT"/>RemoveObj(targetSprite)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Classes.Game.GameClock" [color="black", fontcolor="black", label=<{GameClock|ClockMul : float<br ALIGN="LEFT"/>ClockMulRange : tuple<br ALIGN="LEFT"/>CurrentMonth<br ALIGN="LEFT"/>DateTime<br ALIGN="LEFT"/>Day : int<br ALIGN="LEFT"/>DayOfMonth<br ALIGN="LEFT"/>Hour<br ALIGN="LEFT"/>LastTime<br ALIGN="LEFT"/>Minute<br ALIGN="LEFT"/>PygameClock<br ALIGN="LEFT"/>Second : int<br ALIGN="LEFT"/>UnixTime<br ALIGN="LEFT"/>|ChangeClockMul(value)<br ALIGN="LEFT"/>DayChange()<br ALIGN="LEFT"/>MonthChange()<br ALIGN="LEFT"/>UpdateClock()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Classes.GameObject.GameObject" [color="black", fontcolor="black", label=<{GameObject|Collision : bool<br ALIGN="LEFT"/>IsBackground : bool<br ALIGN="LEFT"/>IsRendered : bool<br ALIGN="LEFT"/>Moveable : bool<br ALIGN="LEFT"/>|Update()<br ALIGN="LEFT"/><I>UpdateSprite</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Classes.Sprite.ImagePaths" [color="black", fontcolor="black", label=<{ImagePaths|CustomerPath : str<br ALIGN="LEFT"/>TablePath : str<br ALIGN="LEFT"/>WorkerPath : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"Classes.Sprite.ImageTypes" [color="black", fontcolor="black", label=<{ImageTypes|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"Classes.Jobs.Job" [color="black", fontcolor="black", label=<{Job|AssignedWorker : int<br ALIGN="LEFT"/>JobCustomer : int<br ALIGN="LEFT"/>JobId : int<br ALIGN="LEFT"/>Length : int<br ALIGN="LEFT"/>Price : float<br ALIGN="LEFT"/>Type<br ALIGN="LEFT"/>Urgency<br ALIGN="LEFT"/>|Assign(target)<br ALIGN="LEFT"/>GetAssignedFromID(jobList, targetID)<br ALIGN="LEFT"/>SpawnJob()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Classes.Jobs.JobTypes" [color="black", fontcolor="black", label=<{JobTypes|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"Classes.Chances.LuckChances" [color="black", fontcolor="black", label=<{LuckChances|CustomerSpawn : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"Classes.Game.Month" [color="black", fontcolor="black", label=<{Month|Days : int<br ALIGN="LEFT"/>MonthOrder : int<br ALIGN="LEFT"/>Name : str<br ALIGN="LEFT"/>PreceedingDays : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"Handlers.MovementHandler.MovementSpeeds" [color="black", fontcolor="black", label=<{MovementSpeeds|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"Classes.People.Person" [color="black", fontcolor="black", label=<{Person|Body : NoneType<br ALIGN="LEFT"/>CurrentJobId : int<br ALIGN="LEFT"/>FirstName : str<br ALIGN="LEFT"/>IdNum : int<br ALIGN="LEFT"/>IsAssigned : bool<br ALIGN="LEFT"/>LastName : str<br ALIGN="LEFT"/>|Create()<br ALIGN="LEFT"/>GenerateID()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Classes.TimerBar.TimerBar" [color="black", fontcolor="black", label=<{TimerBar|Color : tuple<br ALIGN="LEFT"/>CompletionPercentage : float<br ALIGN="LEFT"/>Duration : float<br ALIGN="LEFT"/>Height : int<br ALIGN="LEFT"/>MaxWidth : int<br ALIGN="LEFT"/>OnComplete<br ALIGN="LEFT"/>Rect<br ALIGN="LEFT"/>StartTime : int<br ALIGN="LEFT"/>Width : int<br ALIGN="LEFT"/>|AgeTimer()<br ALIGN="LEFT"/>StartTimer()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Classes.Jobs.UrgencyRatings" [color="black", fontcolor="black", label=<{UrgencyRatings|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"Classes.People.Worker" [color="black", fontcolor="black", label=<{Worker|BasePay : float<br ALIGN="LEFT"/>|CreateWorker()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Classes.People.Customer" -> "Classes.People.Person" [arrowhead="empty", arrowtail="none"];
"Classes.People.Worker" -> "Classes.People.Person" [arrowhead="empty", arrowtail="none"];
"Classes.Sprite.BackgroundElementSprite" -> "Classes.GameObject.GameObject" [arrowhead="empty", arrowtail="none"];
"Classes.Sprite.CharImageSprite" -> "Classes.GameObject.GameObject" [arrowhead="empty", arrowtail="none"];
"Classes.Chances.LuckChances" -> "Classes.Game.Game" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Chances", style="solid"];
"Classes.Game.GameClock" -> "Classes.Game.Game" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Clock", style="solid"];
"Classes.Jobs.Job" -> "Classes.People.Customer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="DesiredJob", style="solid"];
"Classes.Jobs.JobTypes" -> "Classes.Jobs.Job" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Type", style="solid"];
"Classes.Jobs.UrgencyRatings" -> "Classes.Jobs.Job" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Urgency", style="solid"];
"Classes.People.CustomerStates" -> "Classes.People.Customer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="CurrentState", style="solid"];
"Handlers.MovementHandler.CharacterMovementHandler" -> "Classes.Sprite.CharImageSprite" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="MvmHandler", style="solid"];
"Handlers.MovementHandler.MovementSpeeds" -> "Handlers.MovementHandler.CharacterMovementHandler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="MaxMovementSpeed", style="solid"];
}
